/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/hots_webapp/web/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/thirdparty/popper.min.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/thirdparty/popper.min.js":
/*!********************************************!*\
  !*** ./assets/js/thirdparty/popper.min.js ***!
  \********************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 Copyright (C) Federico Zivolo 2017
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */var nativeHints = ['native code', '[object MutationObserverConstructor]'];var isNative = function isNative(e) {
  return nativeHints.some(function (t) {
    return -1 < (e || '').toString().indexOf(t);
  });
};var isBrowser = 'undefined' != typeof window,
    longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];var timeoutDuration = 0;for (var e = 0; e < longerTimeoutBrowsers.length; e += 1) {
  if (isBrowser && 0 <= navigator.userAgent.indexOf(longerTimeoutBrowsers[e])) {
    timeoutDuration = 1;break;
  }
}function microtaskDebounce(e) {
  var t = !1,
      o = 0;var i = document.createElement('span'),
      n = new MutationObserver(function () {
    e(), t = !1;
  });return n.observe(i, { attributes: !0 }), function () {
    t || (t = !0, i.setAttribute('x-index', o), ++o);
  };
}function taskDebounce(e) {
  var t = !1;return function () {
    t || (t = !0, setTimeout(function () {
      t = !1, e();
    }, timeoutDuration));
  };
}var supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);var debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;function isFunction(e) {
  return e && '[object Function]' === {}.toString.call(e);
}function getStyleComputedProperty(e, t) {
  if (1 !== e.nodeType) return [];var o = window.getComputedStyle(e, null);return t ? o[t] : o;
}function getParentNode(e) {
  return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
}function getScrollParent(e) {
  if (!e || -1 !== ['HTML', 'BODY', '#document'].indexOf(e.nodeName)) return window.document.body;
  var _getStyleComputedProp = getStyleComputedProperty(e),
      t = _getStyleComputedProp.overflow,
      o = _getStyleComputedProp.overflowX,
      i = _getStyleComputedProp.overflowY;

  return (/(auto|scroll)/.test(t + i + o) ? e : getScrollParent(getParentNode(e))
  );
}function getOffsetParent(e) {
  var t = e && e.offsetParent,
      o = t && t.nodeName;return o && 'BODY' !== o && 'HTML' !== o ? -1 !== ['TD', 'TABLE'].indexOf(t.nodeName) && 'static' === getStyleComputedProperty(t, 'position') ? getOffsetParent(t) : t : window.document.documentElement;
}function isOffsetContainer(e) {
  var t = e.nodeName;
  return 'BODY' !== t && ('HTML' === t || getOffsetParent(e.firstElementChild) === e);
}function getRoot(e) {
  return null === e.parentNode ? e : getRoot(e.parentNode);
}function findCommonOffsetParent(e, t) {
  if (!e || !e.nodeType || !t || !t.nodeType) return window.document.documentElement;var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
      i = o ? e : t,
      n = o ? t : e,
      r = document.createRange();r.setStart(i, 0), r.setEnd(n, 0);var p = r.commonAncestorContainer;
  if (e !== p && t !== p || i.contains(n)) return isOffsetContainer(p) ? p : getOffsetParent(p);var d = getRoot(e);return d.host ? findCommonOffsetParent(d.host, t) : findCommonOffsetParent(e, getRoot(t).host);
}function getScroll(e) {
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
  var o = 'top' === t ? 'scrollTop' : 'scrollLeft',
      i = e.nodeName;if ('BODY' === i || 'HTML' === i) {
    var _e = window.document.documentElement,
        _t = window.document.scrollingElement || _e;return _t[o];
  }return e[o];
}function includeScroll(e, t) {
  var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
  var i = getScroll(t, 'top'),
      n = getScroll(t, 'left'),
      r = o ? -1 : 1;return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;
}function getBordersSize(e, t) {
  var o = 'x' === t ? 'Left' : 'Top',
      i = 'Left' == o ? 'Right' : 'Bottom';return +e['border' + o + 'Width'].split('px')[0] + +e['border' + i + 'Width'].split('px')[0];
}var isIE10 = void 0;var isIE10$1 = function isIE10$1() {
  return void 0 == isIE10 && (isIE10 = -1 !== navigator.appVersion.indexOf('MSIE 10')), isIE10;
};function getSize(e, t, o, i) {
  return Math.max(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], isIE10$1() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);
}function getWindowSizes() {
  var e = window.document.body,
      t = window.document.documentElement,
      o = isIE10$1() && window.getComputedStyle(t);return { height: getSize('Height', e, t, o), width: getSize('Width', e, t, o) };
}var _extends = Object.assign || function (e) {
  for (var t, o = 1; o < arguments.length; o++) {
    for (var i in t = arguments[o], t) {
      Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
    }
  }return e;
};function getClientRect(e) {
  return _extends({}, e, { right: e.left + e.width, bottom: e.top + e.height });
}function getBoundingClientRect(e) {
  var t = {};if (isIE10$1()) try {
    t = e.getBoundingClientRect();var _o = getScroll(e, 'top'),
        _i = getScroll(e, 'left');t.top += _o, t.left += _i, t.bottom += _o, t.right += _i;
  } catch (e) {} else t = e.getBoundingClientRect();var o = { left: t.left, top: t.top, width: t.right - t.left, height: t.bottom - t.top },
      i = 'HTML' === e.nodeName ? getWindowSizes() : {},
      n = i.width || e.clientWidth || o.right - o.left,
      r = i.height || e.clientHeight || o.bottom - o.top;var p = e.offsetWidth - n,
      d = e.offsetHeight - r;if (p || d) {
    var _t2 = getStyleComputedProperty(e);p -= getBordersSize(_t2, 'x'), d -= getBordersSize(_t2, 'y'), o.width -= p, o.height -= d;
  }return getClientRect(o);
}function getOffsetRectRelativeToArbitraryNode(e, t) {
  var o = isIE10$1(),
      i = 'HTML' === t.nodeName,
      n = getBoundingClientRect(e),
      r = getBoundingClientRect(t),
      p = getScrollParent(e),
      d = getStyleComputedProperty(t),
      s = +d.borderTopWidth.split('px')[0],
      a = +d.borderLeftWidth.split('px')[0];var f = getClientRect({ top: n.top - r.top - s, left: n.left - r.left - a, width: n.width, height: n.height });if (f.marginTop = 0, f.marginLeft = 0, !o && i) {
    var _e2 = +d.marginTop.split('px')[0],
        _t3 = +d.marginLeft.split('px')[0];f.top -= s - _e2, f.bottom -= s - _e2, f.left -= a - _t3, f.right -= a - _t3, f.marginTop = _e2, f.marginLeft = _t3;
  }return (o ? t.contains(p) : t === p && 'BODY' !== p.nodeName) && (f = includeScroll(f, t)), f;
}function getViewportOffsetRectRelativeToArtbitraryNode(e) {
  var t = Math.max;var o = window.document.documentElement,
      i = getOffsetRectRelativeToArbitraryNode(e, o),
      n = t(o.clientWidth, window.innerWidth || 0),
      r = t(o.clientHeight, window.innerHeight || 0),
      p = getScroll(o),
      d = getScroll(o, 'left'),
      s = { top: p - i.top + i.marginTop, left: d - i.left + i.marginLeft, width: n, height: r };return getClientRect(s);
}function isFixed(e) {
  var t = e.nodeName;return 'BODY' === t || 'HTML' === t ? !1 : !('fixed' !== getStyleComputedProperty(e, 'position')) || isFixed(getParentNode(e));
}function getBoundaries(e, t, o, i) {
  var n = { top: 0, left: 0 };var r = findCommonOffsetParent(e, t);if ('viewport' === i) n = getViewportOffsetRectRelativeToArtbitraryNode(r);else {
    var _t4 = void 0;'scrollParent' === i ? (_t4 = getScrollParent(getParentNode(e)), 'BODY' === _t4.nodeName && (_t4 = window.document.documentElement)) : 'window' === i ? _t4 = window.document.documentElement : _t4 = i;var _o2 = getOffsetRectRelativeToArbitraryNode(_t4, r);if ('HTML' === _t4.nodeName && !isFixed(r)) {
      var _getWindowSizes = getWindowSizes(),
          _e3 = _getWindowSizes.height,
          _t5 = _getWindowSizes.width;

      n.top += _o2.top - _o2.marginTop, n.bottom = _e3 + _o2.top, n.left += _o2.left - _o2.marginLeft, n.right = _t5 + _o2.left;
    } else n = _o2;
  }return n.left += o, n.top += o, n.right -= o, n.bottom -= o, n;
}function getArea(_ref) {
  var e = _ref.width,
      t = _ref.height;
  return e * t;
}function computeAutoPlacement(e, t, o, i, n) {
  var r = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  if (-1 === e.indexOf('auto')) return e;var p = getBoundaries(o, i, r, n),
      d = { top: { width: p.width, height: t.top - p.top }, right: { width: p.right - t.right, height: p.height }, bottom: { width: p.width, height: p.bottom - t.bottom }, left: { width: t.left - p.left, height: p.height } },
      s = Object.keys(d).map(function (e) {
    return _extends({ key: e }, d[e], { area: getArea(d[e]) });
  }).sort(function (e, t) {
    return t.area - e.area;
  }),
      a = s.filter(function (_ref2) {
    var e = _ref2.width,
        t = _ref2.height;
    return e >= o.clientWidth && t >= o.clientHeight;
  }),
      f = 0 < a.length ? a[0].key : s[0].key,
      l = e.split('-')[1];return f + (l ? '-' + l : '');
}function getReferenceOffsets(e, t, o) {
  var i = findCommonOffsetParent(t, o);return getOffsetRectRelativeToArbitraryNode(o, i);
}function getOuterSizes(e) {
  var t = window.getComputedStyle(e),
      o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),
      i = parseFloat(t.marginLeft) + parseFloat(t.marginRight),
      n = { width: e.offsetWidth + i, height: e.offsetHeight + o };return n;
}function getOppositePlacement(e) {
  var t = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };return e.replace(/left|right|bottom|top/g, function (e) {
    return t[e];
  });
}function getPopperOffsets(e, t, o) {
  o = o.split('-')[0];var i = getOuterSizes(e),
      n = { width: i.width, height: i.height },
      r = -1 !== ['right', 'left'].indexOf(o),
      p = r ? 'top' : 'left',
      d = r ? 'left' : 'top',
      s = r ? 'height' : 'width',
      a = r ? 'width' : 'height';return n[p] = t[p] + t[s] / 2 - i[s] / 2, n[d] = o === d ? t[d] - i[a] : t[getOppositePlacement(d)], n;
}function find(e, t) {
  return Array.prototype.find ? e.find(t) : e.filter(t)[0];
}function findIndex(e, t, o) {
  if (Array.prototype.findIndex) return e.findIndex(function (e) {
    return e[t] === o;
  });var i = find(e, function (e) {
    return e[t] === o;
  });return e.indexOf(i);
}function runModifiers(e, t, o) {
  var i = void 0 === o ? e : e.slice(0, findIndex(e, 'name', o));return i.forEach(function (e) {
    e.function && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var o = e.function || e.fn;e.enabled && isFunction(o) && (t.offsets.popper = getClientRect(t.offsets.popper), t.offsets.reference = getClientRect(t.offsets.reference), t = o(t, e));
  }), t;
}function _update() {
  if (this.state.isDestroyed) return;var e = { instance: this, styles: {}, arrowStyles: {}, attributes: {}, flipped: !1, offsets: {} };e.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference), e.placement = computeAutoPlacement(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = getPopperOffsets(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = 'absolute', e = runModifiers(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
}function isModifierEnabled(e, t) {
  return e.some(function (_ref3) {
    var e = _ref3.name,
        o = _ref3.enabled;
    return o && e === t;
  });
}function getSupportedPropertyName(e) {
  var t = [!1, 'ms', 'Webkit', 'Moz', 'O'],
      o = e.charAt(0).toUpperCase() + e.slice(1);for (var n = 0; n < t.length - 1; n++) {
    var i = t[n],
        r = i ? '' + i + o : e;if ('undefined' != typeof window.document.body.style[r]) return r;
  }return null;
}function _destroy() {
  return this.state.isDestroyed = !0, isModifierEnabled(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.left = '', this.popper.style.position = '', this.popper.style.top = '', this.popper.style[getSupportedPropertyName('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
}function attachToScrollParents(e, t, o, i) {
  var n = 'BODY' === e.nodeName,
      r = n ? window : e;r.addEventListener(t, o, { passive: !0 }), n || attachToScrollParents(getScrollParent(r.parentNode), t, o, i), i.push(r);
}function setupEventListeners(e, t, o, i) {
  o.updateBound = i, window.addEventListener('resize', o.updateBound, { passive: !0 });var n = getScrollParent(e);return attachToScrollParents(n, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = n, o.eventsEnabled = !0, o;
}function _enableEventListeners() {
  this.state.eventsEnabled || (this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate));
}function removeEventListeners(e, t) {
  return window.removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {
    e.removeEventListener('scroll', t.updateBound);
  }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
}function _disableEventListeners() {
  this.state.eventsEnabled && (window.cancelAnimationFrame(this.scheduleUpdate), this.state = removeEventListeners(this.reference, this.state));
}function isNumeric(e) {
  return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);
}function setStyles(e, t) {
  Object.keys(t).forEach(function (o) {
    var i = '';-1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && isNumeric(t[o]) && (i = 'px'), e.style[o] = t[o] + i;
  });
}function setAttributes(e, t) {
  Object.keys(t).forEach(function (o) {
    var i = t[o];!1 === i ? e.removeAttribute(o) : e.setAttribute(o, t[o]);
  });
}function applyStyle(e) {
  return setStyles(e.instance.popper, e.styles), setAttributes(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && setStyles(e.arrowElement, e.arrowStyles), e;
}function applyStyleOnLoad(e, t, o, i, n) {
  var r = getReferenceOffsets(n, t, e),
      p = computeAutoPlacement(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);return t.setAttribute('x-placement', p), setStyles(t, { position: 'absolute' }), o;
}function computeStyle(e, t) {
  var o = Math.floor;var i = t.x,
      n = t.y,
      r = e.offsets.popper,
      p = find(e.instance.modifiers, function (e) {
    return 'applyStyle' === e.name;
  }).gpuAcceleration;
  void 0 !== p && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var d = void 0 === p ? t.gpuAcceleration : p,
      s = getOffsetParent(e.instance.popper),
      a = getBoundingClientRect(s),
      f = { position: r.position },
      l = { left: o(r.left), top: o(r.top), bottom: o(r.bottom), right: o(r.right) },
      m = 'bottom' === i ? 'top' : 'bottom',
      c = 'right' === n ? 'left' : 'right',
      h = getSupportedPropertyName('transform');var u = void 0,
      g = void 0;if (g = 'bottom' == m ? -a.height + l.bottom : l.top, u = 'right' == c ? -a.width + l.right : l.left, d && h) f[h] = 'translate3d(' + u + 'px, ' + g + 'px, 0)', f[m] = 0, f[c] = 0, f.willChange = 'transform';else {
    var _e4 = 'bottom' == m ? -1 : 1,
        _t6 = 'right' == c ? -1 : 1;f[m] = g * _e4, f[c] = u * _t6, f.willChange = m + ', ' + c;
  }var b = { "x-placement": e.placement };return e.attributes = _extends({}, b, e.attributes), e.styles = _extends({}, f, e.styles), e.arrowStyles = _extends({}, e.offsets.arrow, e.arrowStyles), e;
}function isModifierRequired(e, t, o) {
  var i = find(e, function (_ref4) {
    var e = _ref4.name;
    return e === t;
  }),
      n = !!i && e.some(function (e) {
    return e.name === o && e.enabled && e.order < i.order;
  });if (!n) {
    var _e5 = '`' + t + '`',
        _i2 = '`' + o + '`';console.warn(_i2 + ' modifier is required by ' + _e5 + ' modifier in order to work, be sure to include it before ' + _e5 + '!');
  }return n;
}function arrow(e, t) {
  if (!isModifierRequired(e.instance.modifiers, 'arrow', 'keepTogether')) return e;var o = t.element;if ('string' == typeof o) {
    if (o = e.instance.popper.querySelector(o), !o) return e;
  } else if (!e.instance.popper.contains(o)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;var i = e.placement.split('-')[0],
      _e$offsets = e.offsets,
      n = _e$offsets.popper,
      r = _e$offsets.reference,
      p = -1 !== ['left', 'right'].indexOf(i),
      d = p ? 'height' : 'width',
      s = p ? 'Top' : 'Left',
      a = s.toLowerCase(),
      f = p ? 'left' : 'top',
      l = p ? 'bottom' : 'right',
      m = getOuterSizes(o)[d];r[l] - m < n[a] && (e.offsets.popper[a] -= n[a] - (r[l] - m)), r[a] + m > n[l] && (e.offsets.popper[a] += r[a] + m - n[l]);var c = r[a] + r[d] / 2 - m / 2,
      h = getStyleComputedProperty(e.instance.popper, 'margin' + s).replace('px', '');var u = c - getClientRect(e.offsets.popper)[a] - h;return u = Math.max(Math.min(n[d] - m, u), 0), e.arrowElement = o, e.offsets.arrow = {}, e.offsets.arrow[a] = Math.round(u), e.offsets.arrow[f] = '', e;
}function getOppositeVariation(e) {
  if ('end' === e) return 'start';return 'start' === e ? 'end' : e;
}var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];var validPlacements = placements.slice(3);function clockwise(e) {
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
  var o = validPlacements.indexOf(e),
      i = validPlacements.slice(o + 1).concat(validPlacements.slice(0, o));return t ? i.reverse() : i;
}var BEHAVIORS = { FLIP: 'flip', CLOCKWISE: 'clockwise', COUNTERCLOCKWISE: 'counterclockwise' };function flip(e, t) {
  if (isModifierEnabled(e.instance.modifiers, 'inner')) return e;if (e.flipped && e.placement === e.originalPlacement) return e;var o = getBoundaries(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement);var i = e.placement.split('-')[0],
      n = getOppositePlacement(i),
      r = e.placement.split('-')[1] || '',
      p = [];switch (t.behavior) {case BEHAVIORS.FLIP:
      p = [i, n];break;case BEHAVIORS.CLOCKWISE:
      p = clockwise(i);break;case BEHAVIORS.COUNTERCLOCKWISE:
      p = clockwise(i, !0);break;default:
      p = t.behavior;}return p.forEach(function (d, s) {
    if (i !== d || p.length === s + 1) return e;i = e.placement.split('-')[0], n = getOppositePlacement(i);var a = e.offsets.popper,
        f = e.offsets.reference,
        l = Math.floor,
        m = 'left' === i && l(a.right) > l(f.left) || 'right' === i && l(a.left) < l(f.right) || 'top' === i && l(a.bottom) > l(f.top) || 'bottom' === i && l(a.top) < l(f.bottom),
        c = l(a.left) < l(o.left),
        h = l(a.right) > l(o.right),
        u = l(a.top) < l(o.top),
        g = l(a.bottom) > l(o.bottom),
        b = 'left' === i && c || 'right' === i && h || 'top' === i && u || 'bottom' === i && g,
        y = -1 !== ['top', 'bottom'].indexOf(i),
        w = !!t.flipVariations && (y && 'start' === r && c || y && 'end' === r && h || !y && 'start' === r && u || !y && 'end' === r && g);(m || b || w) && (e.flipped = !0, (m || b) && (i = p[s + 1]), w && (r = getOppositeVariation(r)), e.placement = i + (r ? '-' + r : ''), e.offsets.popper = _extends({}, e.offsets.popper, getPopperOffsets(e.instance.popper, e.offsets.reference, e.placement)), e = runModifiers(e.instance.modifiers, e, 'flip'));
  }), e;
}function keepTogether(e) {
  var _e$offsets2 = e.offsets,
      t = _e$offsets2.popper,
      o = _e$offsets2.reference,
      i = e.placement.split('-')[0],
      n = Math.floor,
      r = -1 !== ['top', 'bottom'].indexOf(i),
      p = r ? 'right' : 'bottom',
      d = r ? 'left' : 'top',
      s = r ? 'width' : 'height';
  return t[p] < n(o[d]) && (e.offsets.popper[d] = n(o[d]) - t[s]), t[d] > n(o[p]) && (e.offsets.popper[d] = n(o[p])), e;
}function toValue(e, t, o, i) {
  var n = Math.max;var r = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
      p = +r[1],
      d = r[2];if (!p) return e;if (0 === d.indexOf('%')) {
    var _e6 = void 0;switch (d) {case '%p':
        _e6 = o;break;case '%':case '%r':default:
        _e6 = i;}var _n = getClientRect(_e6);return _n[t] / 100 * p;
  }if ('vh' === d || 'vw' === d) {
    var _e7 = void 0;return _e7 = 'vh' === d ? n(document.documentElement.clientHeight, window.innerHeight || 0) : n(document.documentElement.clientWidth, window.innerWidth || 0), _e7 / 100 * p;
  }return p;
}function parseOffset(e, t, o, i) {
  var n = [0, 0],
      r = -1 !== ['right', 'left'].indexOf(i),
      p = e.split(/(\+|\-)/).map(function (e) {
    return e.trim();
  }),
      d = p.indexOf(find(p, function (e) {
    return -1 !== e.search(/,|\s/);
  }));p[d] && -1 === p[d].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var s = /\s*,\s*|\s+/;var a = -1 === d ? [p] : [p.slice(0, d).concat([p[d].split(s)[0]]), [p[d].split(s)[1]].concat(p.slice(d + 1))];return a = a.map(function (e, i) {
    var n = (1 === i ? !r : r) ? 'height' : 'width';var p = !1;return e.reduce(function (e, t) {
      return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);
    }, []).map(function (e) {
      return toValue(e, n, t, o);
    });
  }), a.forEach(function (e, t) {
    e.forEach(function (o, i) {
      isNumeric(o) && (n[t] += o * ('-' === e[i - 1] ? -1 : 1));
    });
  }), n;
}function offset(e, _ref5) {
  var t = _ref5.offset;
  var o = e.placement,
      _e$offsets3 = e.offsets,
      i = _e$offsets3.popper,
      n = _e$offsets3.reference,
      r = o.split('-')[0];
  var p = void 0;return p = isNumeric(+t) ? [+t, 0] : parseOffset(t, i, n, r), 'left' === r ? (i.top += p[0], i.left -= p[1]) : 'right' === r ? (i.top += p[0], i.left += p[1]) : 'top' === r ? (i.left += p[0], i.top -= p[1]) : 'bottom' === r && (i.left += p[0], i.top += p[1]), e.popper = i, e;
}function preventOverflow(e, t) {
  var o = t.boundariesElement || getOffsetParent(e.instance.popper);e.instance.reference === o && (o = getOffsetParent(o));var i = getBoundaries(e.instance.popper, e.instance.reference, t.padding, o);t.boundaries = i;var n = t.priority;var r = e.offsets.popper;var p = {
    primary: function primary(e) {
      var o = r[e];return r[e] < i[e] && !t.escapeWithReference && (o = Math.max(r[e], i[e])), _defineProperty({}, e, o);
    },
    secondary: function secondary(e) {
      var o = 'right' === e ? 'left' : 'top';var n = r[o];return r[e] > i[e] && !t.escapeWithReference && (n = Math.min(r[o], i[e] - ('right' === e ? r.width : r.height))), _defineProperty({}, o, n);
    }
  };return n.forEach(function (e) {
    var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';r = _extends({}, r, p[t](e));
  }), e.offsets.popper = r, e;
}function shift(e) {
  var t = e.placement,
      o = t.split('-')[0],
      i = t.split('-')[1];if (i) {
    var _e$offsets4 = e.offsets,
        _t7 = _e$offsets4.reference,
        n = _e$offsets4.popper,
        r = -1 !== ['bottom', 'top'].indexOf(o),
        p = r ? 'left' : 'top',
        d = r ? 'width' : 'height',
        s = { start: _defineProperty({}, p, _t7[p]), end: _defineProperty({}, p, _t7[p] + _t7[d] - n[d]) };
    e.offsets.popper = _extends({}, n, s[i]);
  }return e;
}function hide(e) {
  if (!isModifierRequired(e.instance.modifiers, 'hide', 'preventOverflow')) return e;var t = e.offsets.reference,
      o = find(e.instance.modifiers, function (e) {
    return 'preventOverflow' === e.name;
  }).boundaries;if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {
    if (!0 === e.hide) return e;e.hide = !0, e.attributes['x-out-of-boundaries'] = '';
  } else {
    if (!1 === e.hide) return e;e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;
  }return e;
}function inner(e) {
  var t = e.placement,
      o = t.split('-')[0],
      _e$offsets5 = e.offsets,
      i = _e$offsets5.popper,
      n = _e$offsets5.reference,
      r = -1 !== ['left', 'right'].indexOf(o),
      p = -1 === ['top', 'left'].indexOf(o);return i[r ? 'left' : 'top'] = n[o] - (p ? i[r ? 'width' : 'height'] : 0), e.placement = getOppositePlacement(t), e.offsets.popper = getClientRect(i), e;
}var modifiers = { shift: { order: 100, enabled: !0, fn: shift }, offset: { order: 200, enabled: !0, fn: offset, offset: 0 }, preventOverflow: { order: 300, enabled: !0, fn: preventOverflow, priority: ['left', 'right', 'top', 'bottom'], padding: 5, boundariesElement: 'scrollParent' }, keepTogether: { order: 400, enabled: !0, fn: keepTogether }, arrow: { order: 500, enabled: !0, fn: arrow, element: '[x-arrow]' }, flip: { order: 600, enabled: !0, fn: flip, behavior: 'flip', padding: 5, boundariesElement: 'viewport' }, inner: { order: 700, enabled: !1, fn: inner }, hide: { order: 800, enabled: !0, fn: hide }, computeStyle: { order: 850, enabled: !0, fn: computeStyle, gpuAcceleration: !0, x: 'bottom', y: 'right' }, applyStyle: { order: 900, enabled: !0, fn: applyStyle, onLoad: applyStyleOnLoad, gpuAcceleration: void 0 } },
    Defaults = { placement: 'bottom', eventsEnabled: !0, removeOnDestroy: !1, onCreate: function onCreate() {}, onUpdate: function onUpdate() {}, modifiers: modifiers };
var Popper = function () {
  function Popper(e, t) {
    var _this = this;

    var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    }, this.update = debounce(this.update.bind(this)), this.options = _extends({}, Popper.Defaults, o), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = e.jquery ? e[0] : e, this.popper = t.jquery ? t[0] : t, this.options.modifiers = {}, Object.keys(_extends({}, Popper.Defaults.modifiers, o.modifiers)).forEach(function (e) {
      _this.options.modifiers[e] = _extends({}, Popper.Defaults.modifiers[e] || {}, o.modifiers ? o.modifiers[e] : {});
    }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
      return _extends({ name: e }, _this.options.modifiers[e]);
    }).sort(function (e, t) {
      return e.order - t.order;
    }), this.modifiers.forEach(function (e) {
      e.enabled && isFunction(e.onLoad) && e.onLoad(_this.reference, _this.popper, _this.options, e, _this.state);
    }), this.update();var i = this.options.eventsEnabled;i && this.enableEventListeners(), this.state.eventsEnabled = i;
  }

  _createClass(Popper, [{
    key: 'update',
    value: function update() {
      return _update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      return _destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners() {
      return _enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners() {
      return _disableEventListeners.call(this);
    }
  }]);

  return Popper;
}();

Popper.Utils = ('undefined' == typeof window ? global : window).PopperUtils, Popper.placements = placements, Popper.Defaults = Defaults;/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.min.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,